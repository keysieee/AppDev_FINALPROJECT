<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100vh; /* Full viewport height */
            overflow: hidden; /* Prevent scrolling */
            color: black;
            background: url('/images/background.png') no-repeat center center fixed;
            background-size: cover;
            display: flex;
            flex-direction: column;
        }
        .header {
            max-width: 100%;
            background-color: transparent; /* New header color */
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
            padding: 10px 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .header .left-icons {
            display: flex;
            align-items: center;
        }
        .header .left-icons img {
            height: 60px; /* Adjust logo height */
            margin-right: 10px; /* Space between logo and text */
        }
        .header .left-icons .store-name {
            font-size: 24px;
            font-weight: bold;
        }
        .header .right-icons {
            display: flex;
            align-items: center;
        }
        .header .right-icons .icon {
            margin-left: 20px;
            cursor: pointer;
            font-size: 1.5em;
        }
        .header .search {
            margin-left: 20px;
        }
        .header .search input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .container {
            display: flex;
            flex: 1; /* Allow container to take up remaining space */
            width: 100%;
            background-color: white;
        }
        .sidebar {
            width: 15%; /* Sidebar width */
            background-color: #3e3e3e; /* Dark gray background for sidebar */
            padding: 20px;
            color: white; /* Sidebar text color */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Subtle shadow effect */
            display: flex;
            flex-direction: column; /* Stack items vertically */
            align-items: center; /* Center items horizontally */
        }
        .sidebar img {
            width: 150px;
            height: auto;
            margin-bottom: 20px;
        }
        .sidebar .store-name {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
        }
        .sidebar a {
            display: block; /* Block display for links */
            padding: 10px;
            color: white; /* Link color in sidebar */
            text-decoration: none;
            margin-bottom: 10px;
            border: 1px solid #ccc; /* Border for buttons */
            border-radius: 5px; /* Rounded corners */
            transition: background 0.3s; /* Smooth background change */
            width: 100%; /* Make links full width */
            text-align: center; /* Center align text */
        }
        .sidebar a:hover,
        .sidebar a.active {
            background-color: #ff4a4a;
        }
        .menu-item {
        display: block;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #8d4444;
        text-decoration: none;
        color: white;
        text-align: center;
        border-radius: 5px;
        }

        .menu-item.active {
        background-color: #ff4a4a;
        }
        .logout-button {
            margin-top: auto;
            padding: 10px;
            background-color: darkred; /* Logout button background color */
            color: white; /* Text color */
            border: none; /* Remove border */
            border-radius: 5px; /* Rounded corners */
            cursor: pointer; /* Pointer cursor on hover */
            width: 100%; /* Make button full width */
            text-align: center; /* Center align text */
            transition: background 0.3s; /* Smooth background change */
        }
        .logout-button:hover {
            background: rgba(255, 0, 0, 0.2); /* Hover background color */
        }
        .main-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            padding: 5px;
        }
        .content {
            flex-grow: 1; /* Allow content area to grow */
            padding: 10px;
            color: black; /* Change text color to black for readability on white background */
            background-color: transparent; /* Change background color to white */
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1); /* Subtle inner shadow */
            border-radius: 2px; /* Rounded corners */
            margin-top: 5px; /* Reduced space between header and content */
            display: flex;
            flex-direction: column; /* Stack items vertically */
            /* Remove centering properties */
            justify-content: flex-start; /* Align items to the top */
        }
        footer {
            width: 100%;
            background: darkgray; /* Dark gray background for footer */
            padding: 15px; /* Space around footer */
            color: black; /* Footer text color */
            display: flex;
            justify-content: flex-start; /* Align items to the left */
            position: relative; /* Position relative to the content */
        }
        .content img {
            max-width: 100%; /* Make image responsive */
            height: auto; /* Maintain aspect ratio */
            border-radius: 5px; /* Rounded corners for images */
        }
        /* Table styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 0; /* Adjust margin to position table at the top */
        }
        th, td {
            padding: 15px;
            text-align: left;
            border: 1px solid #ccc;
        }
        th {
            background-color: #8c8c8c;
            color: white;
        }
        td {
            background-color: #ddd;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="left-icons">
            <img src="/images/logo.png" alt="R&J Logo" class="store-logo"> <!-- Replace with the actual path to your logo -->
            <div class="store-name">
                RJ CONSUMER GOODS TRADING
            </div>
        </div>
        <div class="right-icons">
            <a href="/admin" class="icon">üè†</a>
            <span class="icon">üë§</span>
            <div class="search">
                <input type="text" placeholder="Search here...">
            </div>
        </div>
    </header>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <img src="/images/admin.png" alt="Admin Logo" class="store-logo"> <!-- Replace with the actual path to your logo -->
            <div class="store-name">
                ADMIN
            </div>
            <br>
            <a href="/admin/dashboard" class="menu-item active">Dashboard</a>
            <a href="/admin/tasks" class="menu-item">Tasks</a>
            <a href="/admin/inout" class="menu-item">In/Out</a>
            <a href="/admin/services" class="menu-item">Services</a>
            <a href="/admin/inventory" class="menu-item">Inventory</a>
            <a href="/admin/shop" class="menu-item">Shop</a>
            <button class="logout-button" onclick="window.location.href='/logout'">Logout</button>
        </div>
        <section class="content">
            <h2>Dashboard</h2>

            <div>
                <canvas id="employeeChart" width="400" height="400"></canvas>
            </div>

            <script>
                fetch('/admin/total-employees')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Fetched data:', data); // Log the fetched data
                        if (data.totalEmployees === undefined) {
                            console.error('Fetched data is missing totalEmployees property:', data);
                            return;
                        }
                        const totalCapacity = 20; // Example total capacity
                        const notOccupied = totalCapacity - data.totalEmployees; // Calculate not occupied
            
                        const ctx = document.getElementById('employeeChart').getContext('2d');
                        const employeeChart = new Chart(ctx, {
                            type: 'pie',
                            data: {
                                labels: ['Total Employees', 'Not Occupied'], // Labels for the chart
                                datasets: [{
                                    label: 'Employee Occupancy',
                                    data: [data.totalEmployees, notOccupied],
                                    backgroundColor: [
                                        'rgba(54, 162, 235, 0.2)', // Blue shade for Total Employees
                                        'rgba(255, 99, 132, 0.2)'  // Pink shade for Not Occupied
                                    ],
                                    borderColor: [
                                        'rgba(54, 162, 235, 1)', 
                                        'rgba(255, 99, 132, 1)'
                                    ],
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    tooltip: {
                                        callbacks: {
                                            label: function(tooltipItem) {
                                                const label = tooltipItem.label;
                                                const value = tooltipItem.raw; // Access the raw data value
                                                if (label === 'Total Employees') {
                                                    return `Total number of employees: ${value}`;
                                                } else if (label === 'Not Occupied') {
                                                    return 'Not Occupied';
                                                }
                                                return label;
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching total employees:', error); // Log any errors
                    });
            </script>
                        
            </section>
        </main>
    </div>

</body>
</html>
